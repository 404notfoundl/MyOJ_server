"""
Django settings for online_judge project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import asyncio
import os
import platform
from datetime import timedelta
from pathlib import Path
from distutils.util import strtobool

# _LOOP = asyncio.get_event_loop()  # 异步用
"""
    自定义的变量:
    CHUNK_SIZE redis中题库分块
    测试数据备份路径
    MEDIA_URL
    MEDIA_ROOT
"""

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# 启动模式
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.getenv('DJANGO_DEBUG'))
# 平台
PLATFORM = platform.system()
IS_LINUX = PLATFORM.lower() == 'linux'

ALLOWED_HOSTS = ['*']

APPEND_SLASH = False

# Application definition

# 如果为True，则将不使用白名单，并且将接受所有来源。默认为False
CORS_ORIGIN_ALLOW_ALL = True

# django-redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/1" % (
            os.getenv('REDIS_HOST'), os.getenv('REDIS_PORT')) if not DEBUG else 'redis://%s:%s/0' % (
            os.getenv('REDIS_HOST'), os.getenv('REDIS_PORT')),
        "OPTIONS": {
            "PICKLE_VERSION": -1,  # Use the latest protocol version
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100, "retry_on_timeout": True, 'health_check_interval': True},
            # , 'decode_responses': True
            "PASSWORD": os.getenv('REDIS_PASSWORD'),
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "SOCKET_CONNECT_TIMEOUT": 5,  # in seconds
            "SOCKET_TIMEOUT": 5,  # in seconds
        }
    }
}

# 题库分块存入redis中，若更改需要删除所有对应的key
CHUNK_SIZE = 50

# celery配置见 celery config.py

# 邮件配置
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv('EMAIL_PORT'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # 你的 QQ 账号
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功
EMAIL_FROM = os.getenv('EMAIL_FROM')  # 你的 QQ 账号

FRONT_END_HOST = os.getenv('FRONT_END_HOST')  # 前端地址

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # add
    'django_db_reconnect',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'problem_lib',
    'site_users',
    'site_config',
    'solutions',
    'oj_tasks',
]
# 测试数据备份路径
MEDIA_ROOT = "H:/problems_backups" if not IS_LINUX else '/home/problems_backups/'
MEDIA_URL = "problems/"

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'util.middlewares.ExceptionMiddleWare.ExceptionMiddleware'  # 全局异常处理
]

MIDDLEWARE_CLASSES = (
    'django.middleware.gzip.GZipMiddleware',
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
        'file_err': {
            'level': 'WARNING',
            # 'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/error.log'),
            'formatter': 'verbose',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
            'backupCount': 30,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file_err'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

RABBITMQ_CONFIG = {
    'host': os.getenv('RABBITMQ_HOST'),
    'port': os.getenv('RABBITMQ_PORT'),
    'vhost': os.getenv('RABBITMQ_VHOST'),
    'username': os.getenv('RABBITMQ_USER'),
    'password': os.getenv('RABBITMQ_PASSWORD'),
    'exchange': {
        'default': 'direct'
    },
    'queue': {
        'task': 'queue_task' if not DEBUG else 'test_queue_task'
    }
}

ROOT_URLCONF = 'online_judge.urls'
# redis 缓存中的键名
REDIS_KEYS = {
    'user_key': 'users',
    'problem_key': 'problems'
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # simpleJWT
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 限流
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/day',
        'user': '20/minute'
    }
    # 对所有分页器生效，但优先级低
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # 指定分页类（源码setting.py配置文件中的此配置为None）
    # 每页显示5条数据
    # 'PAGE_SIZE': 5,
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

SIMPLE_JWT = {
    # token有效时常
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    # 刷新后有效时间
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'uid',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=15),
}
# spj相关键
SPJ_KEY = {
    'prefix': 'spj',
    'pid': 'spj_pid',
    'cid': 'spj_cid',
    'all_files': 'all_spj_list',
    'new_files': 'spj_list',
    'task_keys': {'code': "code", 'lang': "lang", 'O2': "O2", 'uid': "uid", 'pid': "pid", 'timeLimit': 'time_limit',
                  'memoryLimit': 'mem_limit', 'uuid': "uuid", 'method': "method"}
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TMP_SPJ_PATH = '/tmp/spj/' if IS_LINUX else 'H:/problems_backups/spj'  # spj临时存放点

WSGI_APPLICATION = 'online_judge.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DB_NAME'),
        'HOST': os.getenv('MYSQL_HOST'),
        'PORT': os.getenv('MYSQL_PORT'),
        'USER': os.getenv('MYSQL_USER'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        # 'ATOMIC_REQUESTS': True, # 全局事务
    },
    'OPTIONS': {
        'threaded': True,
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_USER_MODEL = 'site_users.SiteUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# STATIC_ROOT=os.path.join(BASE_DIR,'static')
STATICFILES_DIR = [os.path.join(BASE_DIR, 'static'), ]  # 这一条在开发阶段就可以添加

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
